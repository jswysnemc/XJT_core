<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ljp.xjt.mapper.GradeMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.ljp.xjt.entity.Grade">
        <id column="id" property="id" />
        <result column="student_id" property="studentId" />
        <result column="course_id" property="courseId" />
        <result column="score" property="score" />
        <result column="semester" property="semester" />
        <result column="year" property="year" />
        <result column="updated_by_teacher_id" property="updatedByTeacherId" />
        <result column="is_reviewed" property="isReviewed" />
        <result column="create_time" property="createTime" />
        <result column="updated_time" property="updatedTime" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, student_id, course_id, score, semester, year, updated_by_teacher_id, is_reviewed, create_time, updated_time
    </sql>

    <!-- 更新或插入成绩 -->
    <insert id="upsert" parameterType="map">
        INSERT INTO grades (student_id, course_id, score, updated_by_teacher_id, semester, year, create_time, updated_time)
        VALUES (#{studentId}, #{courseId}, #{score}, #{teacherId}, #{semester}, #{year}, NOW(), NOW())
        ON DUPLICATE KEY UPDATE
        score = VALUES(score),
        updated_by_teacher_id = VALUES(updated_by_teacher_id),
        updated_time = NOW()
    </insert>

    <!-- 根据教师ID查询授课关系 -->
    <select id="findTeachingAssignment" resultType="com.ljp.xjt.entity.TeachingAssignment">
        SELECT
        id, teacher_id, course_id, class_id, semester, year
        FROM
        teaching_assignments
        WHERE teacher_id = #{teacherId} AND course_id = #{courseId} AND class_id = #{classId}
        LIMIT 1
    </select>

    <!-- 根据管理员筛选条件分页查询成绩列表 -->
    <select id="getGradesByAdminCriteria" resultType="com.ljp.xjt.dto.AdminGradeDto">
        SELECT
            g.id,
            s.student_name AS studentName,
            s.student_number AS studentNumber,
            cls.class_name AS className,
            c.course_name AS courseName,
            t.teacher_name AS teacherName,
            g.score,
            g.is_abnormal AS isNormal,
            g.is_reviewed AS isReviewed,
            g.updated_time AS updatedAt
        FROM
            grades g
        JOIN
            students s ON g.student_id = s.id
        JOIN
            courses c ON g.course_id = c.id
        LEFT JOIN
            classes cls ON s.class_id = cls.id
        LEFT JOIN
            teaching_assignments ta ON g.course_id = ta.course_id AND s.class_id = ta.class_id
        LEFT JOIN
            teachers t ON ta.teacher_id = t.id
        <where>
            <if test="classId != null">
                AND s.class_id = #{classId}
            </if>
            <if test="courseId != null">
                AND g.course_id = #{courseId}
            </if>
            <if test="studentName != null and studentName != ''">
                AND s.student_name LIKE CONCAT('%', #{studentName}, '%')
            </if>
            <if test="studentNumber != null and studentNumber != ''">
                AND s.student_number LIKE CONCAT('%', #{studentNumber}, '%')
            </if>
        </where>
        ORDER BY
            g.updated_time DESC
    </select>

    <update id="updateGrade" parameterType="com.ljp.xjt.entity.Grade">
        UPDATE grades
        <set>
            <if test="score != null">score = #{score},</if>
            <if test="updatedByTeacherId != null">updated_by_teacher_id = #{updatedByTeacherId},</if>
            <if test="updatedTime != null">updated_time = #{updatedTime}</if>
        </set>
        WHERE student_id = #{studentId} AND course_id = #{courseId}
    </update>

    <select id="findGradesByClassAndCourse" resultType="com.ljp.xjt.entity.Grade">
        SELECT
            g.*
        FROM
            grades g
        JOIN
            students s ON g.student_id = s.id
        WHERE
            s.class_id = #{classId} AND g.course_id = #{courseId}
    </select>

</mapper>